start.time <- Sys.time()
library(dplyr)
library(psych) #for KMO
library(GPArotation)
library(tidyverse)
library(ggplot2)
library(data.table) #for table formatting
library(formattable)
cdcUnik <- read.csv("C:/Users/Ecava/OneDrive/Desktop/research/cdcUnik.csv", header = TRUE)
cdcFAtract <- read.csv("C:/Users/Ecava/OneDrive/Desktop/research/cdcFAtract.csv", header = TRUE)
KMO_By_Component <- function(data,colNam){
uneek <- unique(data[[colNam]])  #creats list to iterate thru
kmo <- c()  #creates object
for(i in uneek){
# makes the sub goup for each
subCat <- filter(data,get(colNam) == i)
# extracts the cols we are looking at
subMatrix <- subCat[,5:21]
# KMO test
cdcCorMatrix <- cor(subMatrix)
kmo <- append(kmo,KMO(r = cdcCorMatrix)$MSA)
}
uneek <- cbind(uneek,kmo)
colnames(uneek) <- c(colNam,"KMO")
#returns list of groups and their KMO for examination
return(uneek)
}
FA_By_Component <- function(data,colNam){
uneek <- unique(data[[colNam]])  #creats list to iterate thru
perVar <- c()  #creates objects
tractFA <- c()
uniqnessFA <- c()
for(i in uneek){
# makes the sub group for each
subCat <- filter(data,get(colNam) == i)
# extracts the cols we are looking at
subMatrix <- subCat[,5:21]
FA <- fa(subMatrix, nfactors = 1,
fm = "pa", max.iter = 100,
rotation = "promax")
# % var explained by factor
ss <- colSums(FA$Structure^2)
perVar <- append(perVar,ss/length(FA$communality))
#this makes that spider thing
#fa.diagram(FA, main = i)
#add scores
scores  <- FA$scores
tract   <- cbind(subCat,scores)[,c("FIPS","PA1")]
tractFA <- rbind(tractFA,tract)
#this removes the uniquness for each strata
uniqnessFA <- bind_rows(uniqnessFA, FA$uniquenesses)
#add unikness (less than .5)
}
perVal <- cbind(uneek,perVar)
colnames(perVal) <- c(colNam,"Percent_Var")
#retruns percent variation explained
# and returns the FIPS and associated FA for each
uniqnessOfFA <- cbind(uneek,uniqnessFA)
colnames(uniqnessOfFA) <- c(colNam,colnames(uniqnessFA))
#retruns uniquness for each component and the strata
return(list(percentVal = perVal,Strat_FA = tractFA, uniqness_by_var = uniqnessOfFA))
}
Histo_By_Strat <- function(data,colNam,colOrig,colStrat){
#this makes a histogram comparing 2 columns of your choosing
# called "colOrig", and "colStrat"
#and are stratified by "colNam"
uneek <- unique(data[[colNam]])  #creates list to iterate thru
for(i in uneek){
par(mfrow = c(1,2))
subCat <- filter(data,get(colNam) == i)
#extracts the 2 colums you wanted histograms of
histOrg <- subCat[,colOrig]
histStrat <- subCat[,colStrat]
hist(histOrg, col=rgb(0,0,1,0.2), main = i)
hist(histStrat, col=rgb(1,0,0,0.2), add=TRUE)
#legends never die
legend('topright', c(colOrig, colStrat),
fill=c(rgb(0,0,1,0.2), rgb(1,0,0,0.2)))
pectSame <- c()
for(i in seq(from=5, to=100, by=5)){
pct <- top_Precentage(subCat,colOrig,colStrat,i)
pectSame <- rbind(pectSame,pct)
}
#this makes plot of how much overlap using counts starting at the top
top_cownt(subCat,colOrig,colStrat)
print(ggplot(subCat, aes(scale0_1(subCat[,colOrig]), scale0_1(subCat[,colStrat]))) +
geom_point(shape=18, color="blue") +
geom_abline(intercept = 0, slope = 1, color="green") +
geom_smooth(method=lm, se=T, color="darkred", fill="black")) + #add linear trend line and Std error
ggtitle(i) + # for the main title
xlab(colOrig) + # for the x axis label
ylab(colStrat) # for the y axis label
}
}
top_Precentage <- function(data,colOrig,colStrat,perct){
nrw <- ceiling(nrow(data)*perct/100)
topOrg <- data %>% arrange(desc(get(colOrig)))  %>% slice(1:nrw) %>% select(FIPS)
topStr <- data %>% arrange(desc(get(colStrat))) %>% slice(1:nrw) %>% select(FIPS)
pctsame <- sum(topStr[,1] %in% topOrg[,1])/nrow(topStr)
return(data.frame(perct,pctsame))
}
top_cownt <- function(data,colOrig,colStrat){
#makes a histogram with points every 100 data points
cowntSame <- c()
samect <- c()
for(i in seq(from=5, nrow(data), by=100)){
nrw <- ceiling(i) #finds max
#selects top amount
topOrg <- data %>% arrange(desc(get(colOrig)))  %>% slice(1:nrw) %>% select(FIPS)
topStr <- data %>% arrange(desc(get(colStrat))) %>% slice(1:nrw) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- sum(topStr[,1] %in% topOrg[,1])/nrow(topStr)
cowntSame <- rbind(cowntSame,samect)
}
plot(cowntSame,type = "o", col = "#69b3a2", ylab = "Percent Shared", main = "Percent Shared")
}
#scales from 0-1
scale0_1 <- function(x){(x-min(x))/(max(x)-min(x))}
#yy <- FA_By_Component(cdcUnik,"STATE")
#yy <- KMO_By_Component(cdcUnik,"STATE")
#Histo_By_Strat(withStrata,"STATE","FULL_PA1","STATE_PA1")
#does analysis stratified and adds it onto the end of the dataframe
strat <- "STATE" #sets strata
byLine <- FA_By_Component(cdcUnik, strat) #does analysis
withStrata <- left_join(cdcFAtract, byLine$Strat_FA, by="FIPS") #adds FA to big dataframe
#adds name of strata to the last column
names(withStrata)[length(names(withStrata))] <- paste(strat,"PA1",sep = "_")
#write uniqueness loadings to a location
#write.csv(byLine$uniqness_by_var, "C:\\Users\\Ecava\\OneDrive\\Desktop\\research\\coolstuff.csv", row.names=FALSE)
# makes pretty pictures for each strata identified
Histo_By_Strat(withStrata,"STATE","FULL_PA1","STATE_PA1") #compares state to country FA
Histo_By_Strat(withStrata, "STATE", "RPL_THEMES", "STATE_PA1") #compares state FA to CDC country wide
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
library(dplyr)
library(psych) #for KMO
library(GPArotation)
library(tidyverse)
library(ggplot2)
library(data.table) #for table formatting
library(formattable)
cdcUnik <- read.csv("C:/Users/Ecava/OneDrive/Desktop/research/cdcUnik.csv", header = TRUE)
cdcFAtract <- read.csv("C:/Users/Ecava/OneDrive/Desktop/research/cdcFAtract.csv", header = TRUE)
KMO_By_Component <- function(data,colNam){
uneek <- unique(data[[colNam]])  #creats list to iterate thru
kmo <- c()  #creates object
for(i in uneek){
# makes the sub goup for each
subCat <- filter(data,get(colNam) == i)
# extracts the cols we are looking at
subMatrix <- subCat[,5:21]
# KMO test
cdcCorMatrix <- cor(subMatrix)
kmo <- append(kmo,KMO(r = cdcCorMatrix)$MSA)
}
uneek <- cbind(uneek,kmo)
colnames(uneek) <- c(colNam,"KMO")
#returns list of groups and their KMO for examination
return(uneek)
}
FA_By_Component <- function(data,colNam){
uneek <- unique(data[[colNam]])  #creats list to iterate thru
perVar <- c()  #creates objects
tractFA <- c()
uniqnessFA <- c()
for(i in uneek){
# makes the sub group for each
subCat <- filter(data,get(colNam) == i)
# extracts the cols we are looking at
subMatrix <- subCat[,5:21]
FA <- fa(subMatrix, nfactors = 1,
fm = "pa", max.iter = 100,
rotation = "promax")
# % var explained by factor
ss <- colSums(FA$Structure^2)
perVar <- append(perVar,ss/length(FA$communality))
#this makes that spider thing
#fa.diagram(FA, main = i)
#add scores
scores  <- FA$scores
tract   <- cbind(subCat,scores)[,c("FIPS","PA1")]
tractFA <- rbind(tractFA,tract)
#this removes the uniquness for each strata
uniqnessFA <- bind_rows(uniqnessFA, FA$uniquenesses)
#add unikness (less than .5)
}
perVal <- cbind(uneek,perVar)
colnames(perVal) <- c(colNam,"Percent_Var")
#retruns percent variation explained
# and returns the FIPS and associated FA for each
uniqnessOfFA <- cbind(uneek,uniqnessFA)
colnames(uniqnessOfFA) <- c(colNam,colnames(uniqnessFA))
#retruns uniquness for each component and the strata
return(list(percentVal = perVal,Strat_FA = tractFA, uniqness_by_var = uniqnessOfFA))
}
Histo_By_Strat <- function(data,colNam,colOrig,colStrat){
#this makes a histogram comparing 2 columns of your choosing
# called "colOrig", and "colStrat"
#and are stratified by "colNam"
uneek <- unique(data[[colNam]])  #creates list to iterate thru
for(i in uneek){
par(mfrow = c(1,2))
subCat <- filter(data,get(colNam) == i)
#extracts the 2 colums you wanted histograms of
histOrg <- subCat[,colOrig]
histStrat <- subCat[,colStrat]
hist(histOrg, col=rgb(0,0,1,0.2), main = i)
hist(histStrat, col=rgb(1,0,0,0.2), add=TRUE)
#legends never die
legend('topright', c(colOrig, colStrat),
fill=c(rgb(0,0,1,0.2), rgb(1,0,0,0.2)))
pectSame <- c()
for(i in seq(from=5, to=100, by=5)){
pct <- top_Precentage(subCat,colOrig,colStrat,i)
pectSame <- rbind(pectSame,pct)
}
#this makes plot of how much overlap using counts starting at the top
top_cownt(subCat,colOrig,colStrat)
print(ggplot(subCat, aes(scale0_1(subCat[,colOrig]), scale0_1(subCat[,colStrat]))) +
geom_point(shape=18, color="blue") +
geom_abline(intercept = 0, slope = 1, color="green") +
geom_smooth(method=lm, se=T, color="darkred", fill="black")) + #add linear trend line and Std error
ggtitle(i) + # for the main title
xlab(colOrig) + # for the x axis label
ylab(colStrat) # for the y axis label
}
}
top_Precentage <- function(data,colOrig,colStrat,perct){
nrw <- ceiling(nrow(data)*perct/100)
topOrg <- data %>% arrange(desc(get(colOrig)))  %>% slice(1:nrw) %>% select(FIPS)
topStr <- data %>% arrange(desc(get(colStrat))) %>% slice(1:nrw) %>% select(FIPS)
pctsame <- sum(topStr[,1] %in% topOrg[,1])/nrow(topStr)
return(data.frame(perct,pctsame))
}
top_cownt <- function(data,colOrig,colStrat){
#makes a histogram with points every 100 data points
cowntSame <- c()
samect <- c()
for(i in seq(from=5, nrow(data), by=100)){
nrw <- ceiling(i) #finds max
#selects top amount
topOrg <- data %>% arrange(desc(get(colOrig)))  %>% slice(1:nrw) %>% select(FIPS)
topStr <- data %>% arrange(desc(get(colStrat))) %>% slice(1:nrw) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- sum(topStr[,1] %in% topOrg[,1])/nrow(topStr)
cowntSame <- rbind(cowntSame,samect)
}
plot(cowntSame,type = "o", col = "#69b3a2", ylab = "Percent Shared", main = "Percent Shared")
}
#scales from 0-1
scale0_1 <- function(x){(x-min(x))/(max(x)-min(x))}
#yy <- FA_By_Component(cdcUnik,"STATE")
#yy <- KMO_By_Component(cdcUnik,"STATE")
#Histo_By_Strat(withStrata,"STATE","FULL_PA1","STATE_PA1")
#does analysis stratified and adds it onto the end of the dataframe
strat <- "STATE" #sets strata
byLine <- FA_By_Component(cdcUnik, strat) #does analysis
withStrata <- left_join(cdcFAtract, byLine$Strat_FA, by="FIPS") #adds FA to big dataframe
#adds name of strata to the last column
names(withStrata)[length(names(withStrata))] <- paste(strat,"PA1",sep = "_")
#write uniqueness loadings to a location
#write.csv(byLine$uniqness_by_var, "C:\\Users\\Ecava\\OneDrive\\Desktop\\research\\coolstuff.csv", row.names=FALSE)
# makes pretty pictures for each strata identified
Histo_By_Strat(withStrata,"STATE","FULL_PA1","STATE_PA1") #compares state to country FA
Histo_By_Strat(withStrata, "STATE", "RPL_THEMES", "STATE_PA1") #compares state FA to CDC country wide
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
x = 1:ncol(byLine$uniqness_by_var)
y = 1:nrow(byLine$uniqness_by_var)
centers <- expand.grid(y,x)
#make the plot margins a little bigger
par(mar = c(2,7,4,2))
image(x, y, t(byLine$uniqness_by_var),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
xaxt = 'n',
yaxt = 'n',
xlab = '',
ylab = '',
ylim = c(max(y) + 0.5, min(y) - 0.5)
)
#make the plot margins a little bigger
par(mar = c(2,7,4,2))
image(x, y, t(byLine$uniqness_by_var),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
xaxt = 'n',
yaxt = 'n',
xlab = '',
ylab = '',
ylim = c(max(y) + 0.5, min(y) - 0.5)
)
image(x, y, t(byLine$uniqness_by_var),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
ylim = c(max(y) + 0.5, min(y) - 0.5)
)
image?
```
numCol <- ncol(byLine$uniqness_by_var)
numRow <- nrow(byLine$uniqness_by_var)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
par(mar = c(2,7,4,2))
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
xaxt = 'n',
yaxt = 'n',
xlab = '',
ylab = '',
ylim = c(max(y) + 0.5, min(y) - 0.5)
)
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
xaxt = 'n',
yaxt = 'n',
xlab = '',
ylab = '',
ylim = c(max(y) + 0.2, min(y) - 0.2)
)
text(centers[,2], centers[,1], c(my.data), col= "black")
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
numCol <- ncol(byLine$uniqness_by_var)
numRow <- nrow(byLine$uniqness_by_var)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
par(mar = c(2,7,4,2))
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
xaxt = 'n',
yaxt = 'n',
xlab = '',
ylab = '',
ylim = c(max(y) + 0.2, min(y) - 0.2)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
xaxt = 'n',
yaxt = 'n',
xlab = '',
ylab = '',
ylim = c(0.2, 0.6)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
numCol <- ncol(byLine$uniqness_by_var)
numRow <- nrow(byLine$uniqness_by_var)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
par(mar = c(2,7,4,2))
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
xaxt = 'n',
yaxt = 'n',
xlab = '',
ylab = '',
ylim = c(0.2, 0.6)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
numCol <- ncol(byLine$uniqness_by_var)
numRow <- nrow(byLine$uniqness_by_var)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
par(mar = c(2,7,4,2))
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
xaxt = 'n',
yaxt = 'n',
xlab = '',
ylab = '',
ylim = c(0.2, min(y) - 0.2)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
numCol <- ncol(byLine$uniqness_by_var)
numRow <- nrow(byLine$uniqness_by_var)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
par(mar = c(2,7,4,2))
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
zlim = c(.25,.75)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
numCol <- ncol(byLine$uniqness_by_var)
numRow <- nrow(byLine$uniqness_by_var)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
par(mar = c(2,7,4,2))
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
zlim = c(.25,.75)
)
#text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
zlim = c(.25,.75)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
numCol <- ncol(byLine$uniqness_by_var)
numRow <- nrow(byLine$uniqness_by_var)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
image(x, y, t(byLine$uniqness_by_var[2:numRow,2:numCol]),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
zlim = c(.25,.75)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
dataa <- byLine$uniqness_by_var[1:10,1:10]
numCol <- ncol(dataa)
numRow <- nrow(dataa)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
image(x, y, t(dataa),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
zlim = c(.25,.75)
)
dataa <- byLine$uniqness_by_var[2:10,2:10]
numCol <- ncol(dataa)
numRow <- nrow(dataa)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
image(x, y, t(dataa),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
zlim = c(.25,.75)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
dataa <- byLine$uniqness_by_var[2:4,2:4]
numCol <- ncol(dataa)
numRow <- nrow(dataa)
x = 1:numCol
y = 1:numRow
centers <- expand.grid(y,x)
#make the plot margins a little bigger
image(x, y, t(dataa),
col = c(rgb(0,0,1,0.3),rgb(1,0,0,0.3), rgb(1,1,0,0.3)),
breaks = c(0, 25, 50, 100),
zlim = c(.25,.75)
)
text(centers[,2], centers[,1], c(byLine$uniqness_by_var), col= "black")
