pctsame <- sum(topStr[,1] %in% topOrg[,1])/nrow(topStr)
return(data.frame(perct,pctsame))
}
top_cownt <- function(data,colOrig,colStrat){
#makes a histogram with points every 100 data points
cowntSame <- c()
samect <- c()
for(i in seq(from=5, nrow(data), by=100)){
nrw <- ceiling(i) #finds max
#selects top amount
topOrg <- data %>% arrange(desc(get(colOrig)))  %>% slice(1:nrw) %>% select(FIPS)
topStr <- data %>% arrange(desc(get(colStrat))) %>% slice(1:nrw) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- sum(topStr[,1] %in% topOrg[,1])/nrow(topStr)
cowntSame <- rbind(cowntSame,samect)
}
plot(cowntSame,type = "o", col = "#69b3a2", ylab = "Percent Shared", main = "Percent Shared")
}
#scales from 0-1
scale0_1 <- function(x){(x-min(x))/(max(x)-min(x))}
#does analysis stratified and adds it onto the end of the dataframe
strat <- "STATE" #sets strata
byLine <- FA_By_Component(cdcUnik, strat,5:21) #does analysis
withStrata <- left_join(cdcFAtract, byLine$Strat_FA, by="FIPS") #adds FA to big dataframe
#adds name of strata to the last column
names(withStrata)[length(names(withStrata))] <- paste(strat,"PA1",sep = "_")
# makes pretty pictures for each strata identified
#Histo_By_Strat(withStrata,"STATE","FULL_PA1","STATE_PA1") #compares state to country FA
Histo_By_Strat(withStrata, "STATE", "RPL_THEMES", "STATE_PA1") #compares state FA to CDC country wide
FA <- fa(cdcUnik[,5:21], nfactors = 1, fm = "pa", max.iter = 100, rotation = "promax")
# Transform the matrix in long format
loadngs <- melt(FA$loadings[,1])
colnames(loadngs) <- c("load")
loadngs$rowss <- colnames(cdcUnik[,5:21])
#plots out
ggplot(loadngs, aes(x = 1, y = rowss, fill = load)) +
geom_tile() +
coord_flip() + labs(x = "Loadings", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1)) +
scale_fill_gradient(low = "white", high = "red") +
scale_y_discrete(labels = c("Total Population","Below 150 of Poverty","Unemployed","Housing Cost Burden","No Highschool Diploma","Uninsured","Over 65","Under 17","Diabled","Single Parent Household","English Proficiency","Minority","Multi-Unit Home","Mobile Home","Crowding Levels","No Vehicle","Group Quarters"))
# Transform the matrix in long format
loadngs <- melt(FA$uniquenesses)
colnames(loadngs) <- c("load")
loadngs$rowss <- colnames(cdcUnik[,5:21])
#plots out
ggplot(loadngs, aes(x = 1, y = rowss, fill = load)) +
geom_tile() +
coord_flip() + labs(x = "Uniquness", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1)) +
scale_fill_gradient(low = "blue", high = "white") +
scale_y_discrete(labels = c("Total Population","Below 150 of Poverty","Unemployed","Housing Cost Burden","No Highschool Diploma","Uninsured","Over 65","Under 17","Diabled","Single Parent Household","English Proficiency","Minority","Multi-Unit Home","Mobile Home","Crowding Levels","No Vehicle","Group Quarters"))
# Transform the matrix in long format
df <- melt(byLine$uniqness_by_var)
colnames(df) <- c("state", "cols", "value")
#plots out
ggplot(df, aes(x = state, y = cols, fill = value)) +
geom_tile() +
coord_flip() + labs(x = "States", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1)) +
scale_fill_gradient(low = "blue", high = "white") +
scale_y_discrete(labels = c("Total Population","Below 150 of Poverty","Unemployed","Housing Cost Burden","No Highschool Diploma","Uninsured","Over 65","Under 17","Diabled","Single Parent Household","English Proficiency","Minority","Multi-Unit Home","Mobile Home","Crowding Levels","No Vehicle","Group Quarters"))
# Transform the matrix in long format
df <- melt(byLine$loadings_by_var)
colnames(df) <- c("state", "cols", "value")
#plots out
ggplot(df, aes(x = state, y = cols, fill = value)) +
geom_tile() +
coord_flip() + labs(x = "States", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1)) +
scale_fill_gradient(low = "white", high = "red") +
scale_y_discrete(labels = c("Total Population","Below 150 of Poverty","Unemployed","Housing Cost Burden","No Highschool Diploma","Uninsured","Over 65","Under 17","Diabled","Single Parent Household","English Proficiency","Minority","Multi-Unit Home","Mobile Home","Crowding Levels","No Vehicle","Group Quarters"))
#this compares the national level FA vs the CDC SIV
ggplot(withStrata, aes(x=rank(RPL_THEMES), y=rank(FULL_PA1))) +
geom_point(shape=18, color="lightgreen") +
geom_abline(intercept = 0, slope = 1, color="red") +
geom_smooth(method=lm, se=T, color="blue4", fill="black") +
ggtitle(paste("CDC SVI Ranks x national FA Ranks")) +
xlab(paste("CDC SVI complete")) + # for the x axis label
ylab(paste("National FA complete")) # for the y axis label
#this compares the stratified state level FA vs the CDC SIV rankings
stratStateRank <- c()
for(i in unique(withStrata$STATE)){
subCat <- filter(withStrata,withStrata$STATE == i)
x <- rank(subCat$RPL_THEMES)
y <- rank(subCat$STATE_PA1)
stratStateRank <- as.data.frame(rbind(stratStateRank, cbind(x,y)))
}
ggplot(stratStateRank, aes(x=x, y= y)) +
geom_point(shape=18, color="lightgreen") +
geom_abline(intercept = 0, slope = 1, color="red") +
geom_smooth(method=lm, se=T, color="blue4", fill="black") +
ggtitle(paste("CDC SVI Ranks x State FA Ranks stratified by state")) +
xlab(paste("CDC SVI Rank")) + # for the x axis label
ylab(paste("STATE FA Rank")) # for the y axis label
uneek <- unique(withStrata[["STATE"]])  #creates list to iterate thru
plott <- c()
corTable <- c()
for(i in uneek){
subCat <- filter(withStrata,get("STATE") == i)
spearCor <- cor.test(x=rank(subCat$RPL_THEMES), y=rank(subCat$STATE_PA1), method = 'spearman')
corTable <- rbind(corTable, c(state = i, Estimate = spearCor$estimate, Pvalue = spearCor$p.value))
print(ggplot(subCat, aes(x=rank(subCat$RPL_THEMES), y=rank(subCat$STATE_PA1))) +
geom_point(shape=18, color="lightgreen") +
geom_abline(intercept = 0, slope = 1, color="green") +
geom_smooth(method=lm, se=T, color="blue4", fill="black") +
ggtitle(paste(i, "CDC SVI Ranks x State FA Ranks")) +
xlab(paste("CDC SVI ", i)) + # for the x axis label
ylab(paste("STATE FA ", i))) # for the y axis label
}
#need to clean this up?? wrong col names
corTable <- as.data.frame(corTable)
nationaCor <- cor.test(x=rank(withStrata$RPL_THEMES), y=rank(withStrata$STATE_PA1), method = 'spearman')
#create %overlap for each state
perct <- 0.10
region <- c()
pct <- c()
pctSharedbyState <- c()
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect)
}
pctSharedbyState <- cbind.data.frame(region =region,pct = pct)
summary(pctSharedbyState$pct)
states <- map_data("state")
colnames(pctSharedbyState) <- c("region","pct")
pctSharedbyState$region <- tolower(pctSharedbyState$region)
shared.geo <- merge(states,pctSharedbyState,by = "region")
shared.geo <- shared.geo[order(shared.geo$order),]
ggplot(shared.geo,aes(long, lat))+
geom_polygon(aes(group=group, fill= pct))+
coord_map() + scale_fill_gradient2(
low = "yellow",
mid = "green",
high = "blue",
midpoint = 0.5)
#percent shared across all states:
top_Precentage(withStrata,"FULL_PA1","RPL_THEMES",10)
#lowest ranked fips
chunk <- withStrata %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:9705)
tbl <- as.data.frame(table(chunk$STATE))
tblfull <- as.data.frame(table(withStrata$STATE))
yy <- inner_join(tbl, tblfull, by = "Var1")
yy$pct <- yy$Freq.x/yy$Freq.y
yy$pctTotal <- yy$Freq.x/9705
#write out the FA results
withFIPS <- TRUE
if(withFIPS == T){
write.csv(withStrata, "C:\\Users\\Ecava\\OneDrive\\Desktop\\research\\withStrata.csv", row.names=FALSE)}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
83331/84414
View(KMO_By_Component)
#does analysis stratified and adds it onto the end of the dataframe
strat <- "STATE" #sets strata
kmos <- KMO_By_Component(cdcUnik, strat)
View(kmos)
View(kmos)
kmos <- as.dataframe(KMO_By_Component(cdcUnik, strat))
kmos <- as.data.frame(KMO_By_Component(cdcUnik, strat))
kmos$KMO <- round(kmos$KMO, 3)
KMO_By_Component <- function(data,colNam){
uneek <- unique(data[[colNam]])  #creats list to iterate thru
kmo <- c()  #creates object
for(i in uneek){
# makes the sub goup for each
subCat <- filter(data,get(colNam) == i)
# extracts the cols we are looking at
subMatrix <- subCat[,5:21]
# KMO test
cdcCorMatrix <- cor(subMatrix)
kmo <- append(kmo,KMO(r = cdcCorMatrix)$MSA)
}
uneek <- cbind(uneek,round(kmo,3))
colnames(uneek) <- c(colNam,"KMO")
#returns list of groups and their KMO for examination
return(uneek)
}
kmos <- as.data.frame(KMO_By_Component(cdcUnik, strat))
View(kmos)
kmos$KMO <- as.numeric(kmos$KMO)
KMO_By_Component <- function(data,colNam){
uneek <- unique(data[[colNam]])  #creats list to iterate thru
kmo <- c()  #creates object
for(i in uneek){
# makes the sub goup for each
subCat <- filter(data,get(colNam) == i)
# extracts the cols we are looking at
subMatrix <- subCat[,5:21]
# KMO test
cdcCorMatrix <- cor(subMatrix)
kmo <- append(kmo,KMO(r = cdcCorMatrix)$MSA)
}
uneek <- cbind(uneek,kmo)
colnames(uneek) <- c(colNam,"KMO")
#returns list of groups and their KMO for examination
return(uneek)
}
kmos <- as.data.frame(KMO_By_Component(cdcUnik, strat))
kmos$KMO <- as.numeric(kmos$KMO)
View(kmos)
ktable(kmos)
table(kmos)
View(kmos)
kmos
library(knitr)
ktable(kmos)
kable(kmos)
kable(kmos,caption = "Table of KMO stratified by State") %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover"),
font_size = 14,
fixed_thead = TRUE,
color_scheme = "light")
kable(kmos,caption = "Table of KMO stratified by State") %>%
kable_styling(full_width = FALSE,
font_size = 14,
fixed_thead = TRUE,
color_scheme = "light")
start.time <- Sys.time()
library(dplyr)
library(psych) #for KMO
library(GPArotation)
library(tidyverse)
library(ggplot2)
library(data.table) #for table formatting
library(formattable)
library(reshape) #for table transformation with ggplot
library(maps)
library(mapproj)
library(knitr)
kmos %>% kable(caption = "Table of KMO stratified by State") %>%
kable_styling(full_width = FALSE,
font_size = 14,
fixed_thead = TRUE,
color_scheme = "light")
kmos %>% kable(caption = "Table of KMO stratified by State") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
kmos %>%
kbl(caption = "Table of KMO stratified by State") %>%
kable_styling()
kmos %>%
kbl(caption = "Table of KMO stratified by State")
kmos %>%
kable(caption = "Table of KMO stratified by State")
kmos$KMO <- round(as.numeric(kmos$KMO),4)
kmos %>%  kable(caption = "Table of KMO stratified by State") %>%
```
kmos %>%  kable(caption = "Table of KMO stratified by State", booktabs = TRUE, valign = 't'
)
View(loadngs)
# Transform the matrix in long format
loadngs <- melt(FA$uniquenesses)
colnames(loadngs) <- c("load")
loadngs$rowss <- colnames(cdcUnik[,5:21])
#plots out
ggplot(loadngs, aes(x = 1, y = rowss, fill = load)) +
geom_tile() +
coord_flip() + labs(x = "Uniquness", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1)) +
scale_fill_gradient(low = "blue", high = "white") +
scale_y_discrete(labels = c("Total Population","Below 150 of Poverty","Unemployed","Housing Cost Burden","No Highschool Diploma","Uninsured","Over 65","Under 17","Diabled","Single Parent Household","English Proficiency","Minority","Multi-Unit Home","Mobile Home","Crowding Levels","No Vehicle","Group Quarters"))
View(byLine)
byLine[["percentVal"]]
View(byLine[["uniqness_by_var"]])
byLine[["loadings_by_var"]] %>% kable(caption = "Loadings by varible and stratified by State")
byLine[["uniqness_by_var"]] %>% kable(caption = "Uniquness by varible and stratified by State")
View(byLine)
FA$loadings %>% kable(caption = "Loadings by varible on a national level")
FA$loadings[,1] %>% kable(caption = "Loadings by varible on a national level")
View(FA)
loadingsTable$loadings <- FA$loadings[,1]
loadingsTable <- c()
loadingsTable$loadings <- FA$loadings[,1]
loadingsTable <- c()
loadingsTable$loadings <- FA$loadings[,1]
View(loadingsTable)
loadingsTable$loadings <- FA$loadings[,1][1]
View(loadingsTable)
loadingsTable$loadings <- FA$loadings[,1][,1]
loadingsTable$loadings <- FA$loadings[,1][1,]
loadingsTable$loadings <- FA$loadings[,1]
View(loadingsTable)
loadingsTable[["loadings"]]
loadingsTable$loadings <- as.data.frame(FA$loadings[,1])
View(loadingsTable)
loadingsTable$loadings <- loadings
View(loadngs)
FA$uniquenesses
loadingsTable$uniqueness <- FA$uniquenesses
View(loadingsTable)
loadingsTable <- c()
loadingsTable$loadings <- melt(FA$loadings[,1])
loadingsTable$uniqueness <- melt(FA$uniquenesses)
View(loadingsTable)
loadingsTable <- as.data.frame(loadingsTable)
loadingsTable$loadings <- melt(FA$loadings[,1])
loadingsTable$uniqueness <- melt(FA$uniquenesses)
loadingsTable <- c()
loadingsTable$loadings <- as.data.frame(melt(FA$loadings[,1]))
View(loadingsTable)
loadingsTable <- c()
loadingsTable$loadings <- melt(FA$loadings[,1])
loadingsTable$uniqueness <- melt(FA$uniquenesses)
loadingsTable$names <- rownames(melt(FA$uniquenesses))
loadingsTable <- as.data.frame(loadingsTable)
View(loadingsTable)
loadingsTable %>% kable(caption = "Uniquness by varible on a national level")
loadingsTable$loadings <- melt(FA$loadings[,1])
loadingsTable$uniqueness <- melt(FA$uniquenesses)
loadingsTable <- as.data.frame(loadingsTable)
colnames(loadingsTable) <- c("Loadings","Uniqueness")
loadingsTable %>% kable(caption = "Uniquness by varible on a national level")
loadingsTable <- c()
loadingsTable <- c()
loadingsTable$loadings <- melt(FA$loadings[,1])
loadingsTable$uniqueness <- melt(FA$uniquenesses)
loadingsTable <- as.data.frame(loadingsTable)
colnames(loadingsTable) <- c("Loadings","Uniqueness")
loadingsTable %>% kable(caption = "Uniquness by varible on a national level")
View(loadingsTable)
states <- map_data("state")
colnames(pctSharedbyState) <- c("region","pct")
pctSharedbyState$region <- tolower(pctSharedbyState$region)
shared.geo <- merge(states,pctSharedbyState,by = "region")
shared.geo <- shared.geo[order(shared.geo$order),]
ggplot(shared.geo,aes(long, lat))+
geom_polygon(aes(group=group, fill= pct))+
coord_map() + scale_fill_gradient2(
low = "yellow",
mid = "green",
high = "blue",
midpoint = 0.5)
#create %overlap for each state
perct <- 0.10
region <- c()
pct <- c()
pctSharedbyState <- c()
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect)
}
pctSharedbyState <- cbind.data.frame(region =region,pct = pct)
summary(pctSharedbyState$pct)
pctSharedbyState %>% kable(caption = "The percentage of overlap of the top 10% between SVI and the FA")
View(pct)
View(pctSharedbyState)
#create %overlap for each state
perct <- 0.10
region <- c()
pctSharedbyState <- c()
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
topStrFul <- subCat %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
samectfull <- round(sum(topStrFul[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect, samectfull)
}
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
topStrFul <- subCat %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
samectfull <- round(sum(topStrFul[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect, samectfull)
pctfull <- rbind(pct, samectfull)
}
pctSharedbyState <- cbind.data.frame(region = region,pct = pct, pctfull = pctfull)
#create %overlap for each state
perct <- 0.10
region <- c()
pct <- c()
pctSharedbyState <- c()
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
topStrFul <- subCat %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
samectfull <- round(sum(topStrFul[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect, samectfull)
pctfull <- rbind(pct, samectfull)
}
pctSharedbyState <- cbind.data.frame(region = region,pct = pct, pctfull = pctfull)
View(pct)
#create %overlap for each state
perct <- 0.10
region <- c()
pct <- c()
pctSharedbyState <- c()
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
topStrFul <- subCat %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
samectfull <- round(sum(topStrFul[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect)
pctfull <- rbind(pct, samectfull)
}
pctSharedbyState <- cbind.data.frame(region = region,pct = pct, pctfull = pctfull)
#create %overlap for each state
perct <- 0.10
region <- c()
pct <- c()
pctSharedbyState <- c()
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
topStrFul <- subCat %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
samectfull <- round(sum(topStrFul[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect)
pctfull <- rbind(pct, samectfull)
}
pctSharedbyState <- cbind.data.frame(region = region,pct = pct, pctfull = pctfull)
#create %overlap for each state
perct <- 0.10
region <- c()
pct <- c()
pctfull <- c()
pctSharedbyState <- c()
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
topStrFul <- subCat %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
samectfull <- round(sum(topStrFul[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect)
pctfull <- rbind(pctfull, samectfull)
}
pctSharedbyState <- cbind.data.frame(region = region,pct = pct, pctfull = pctfull)
summary(pctSharedbyState$pct)
pctSharedbyState %>% kable(caption = "The percentage of overlap of the top 10% between SVI and the FA")
pctSharedbyState <- cbind.data.frame(region = region,pct = pct, pctfull = pctfull)
View(pctSharedbyState)
summary(pctSharedbyState$pct)
pctSharedbyState %>% kable(caption = "The percentage of overlap of the top 10% between SVI and the FA")
pctSharedbyStateAll <- cbind.data.frame(region = region,pct = pct, pctfull = pctfull)
summary(pctSharedbyStateAll$pct)
pctSharedbyStateAll %>% kable(caption = "The percentage of overlap of the top 10% between SVI and the FA")
pctSharedbyState <- pctSharedbyStateAll[,1:2]
pctSharedbyState <- pctSharedbyStateAll[,1:2]
states <- map_data("state")
colnames(pctSharedbyState) <- c("region","pct")
pctSharedbyState$region <- tolower(pctSharedbyState$region)
shared.geo <- merge(states,pctSharedbyState,by = "region")
shared.geo <- shared.geo[order(shared.geo$order),]
ggplot(shared.geo,aes(long, lat))+
geom_polygon(aes(group=group, fill= pct))+
coord_map() + scale_fill_gradient2(
low = "yellow",
mid = "green",
high = "blue",
midpoint = 0.5)
pctSharedbyState <- pctSharedbyStateAll[,c(1,3)]
states <- map_data("state")
colnames(pctSharedbyState) <- c("region","pct")
pctSharedbyState$region <- tolower(pctSharedbyState$region)
shared.geo <- merge(states,pctSharedbyState,by = "region")
shared.geo <- shared.geo[order(shared.geo$order),]
ggplot(shared.geo,aes(long, lat))+
geom_polygon(aes(group=group, fill= pct))+
coord_map() + scale_fill_gradient2(
low = "yellow",
mid = "green",
high = "blue",
midpoint = 0.5)
