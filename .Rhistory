ptScale <- 1
ptWidth <- 10
ptHeight <- 20
KMO_By_Component <- function(data,colNam){
uneek <- unique(data[[colNam]])  #creats list to iterate thru
kmo <- c()  #creates object
for(i in uneek){
# makes the sub goup for each
subCat <- filter(data,get(colNam) == i)
# extracts the cols we are looking at
subMatrix <- subCat[,6:21]
# KMO test
cdcCorMatrix <- cor(subMatrix)
kmo <- append(kmo,KMO(r = cdcCorMatrix)$MSA)
}
uneek <- cbind(uneek,kmo)
colnames(uneek) <- c(colNam,"KMO")
#returns list of groups and their KMO for examination
return(uneek)
}
FA_By_Component <- function(data,colNam, colls){
uneek <- unique(data[[colNam]])  #creats list to iterate thru
perVar <- c()  #creates objects
tractFA <- c()
uniqnessFA <- c()
loadingsFA <- c()
weightsFA <- c()
for(i in uneek){
# makes the sub group for each
subCat <- filter(data,get(colNam) == i)
# extracts the cols we are looking at
subMatrix <- subCat[,colls]
FA <- fa(subMatrix, nfactors = 1,
fm = "pa", max.iter = 100,
rotation = "promax")
# % var explained by factor
ss <- colSums(FA$Structure^2)
perVar <- append(perVar,ss/length(FA$communality))
#this makes that spider thing
#fa.diagram(FA, main = i)
#add scores
scores  <- FA$scores
tract   <- cbind(subCat,scores)[,c("FIPS","PA1")]
tractFA <- rbind(tractFA,tract)
#this removes the uniquness for each strata
uniqnessFA <- bind_rows(uniqnessFA, FA$uniquenesses)
loadingsFA <- bind_rows(loadingsFA, FA$loadings[,1])
weightsFA  <- bind_rows(weightsFA, FA$weights[,1])
}
perVal <- cbind(uneek,perVar)
colnames(perVal) <- c(colNam,"Percent_Var")
#retruns percent variation explained
# and returns the FIPS and associated FA for each
uniqnessOfFA <- cbind(uneek,uniqnessFA)
colnames(uniqnessOfFA) <- c(colNam,colnames(uniqnessFA))
#retruns uniquness for each component and the strata
loadingsOfFA <- cbind(uneek,loadingsFA)
colnames(loadingsOfFA) <- c(colNam,colnames(loadingsFA))
#retruns 'loadings' for each component and the strata
weightsOfFA <- cbind(uneek,weightsFA)
colnames(weightsOfFA) <- c(colNam,colnames(weightsFA))
#retruns 'loadings' for each component and the strata
return(list(percentVal = perVal,Strat_FA = tractFA, uniqness_by_var = uniqnessOfFA, loadings_by_var = loadingsOfFA, weights_by_var = weightsOfFA))
}
Histo_By_Strat <- function(data,colNam,colOrig,colStrat){
#this makes a histogram comparing 2 columns of your choosing
# called "colOrig", and "colStrat"
#and are stratified by "colNam"
uneek <- unique(data[[colNam]])  #creates list to iterate thru
for(i in uneek){
par(mfrow = c(1,2))
subCat <- filter(data,get(colNam) == i)
#extracts the 2 colums you wanted histograms of
histOrg <- subCat[,colOrig]
histStrat <- subCat[,colStrat]
hist(histOrg, col=rgb(0,0,1,0.2), main = i)
hist(histStrat, col=rgb(1,0,0,0.2), add=TRUE)
#legends never die
legend('topright', c(colOrig, colStrat),
fill=c(rgb(0,0,1,0.2), rgb(1,0,0,0.2)))
pectSame <- c()
for(j in seq(from=5, to=100, by=5)){
pct <- top_Precentage(subCat,colOrig,colStrat,j)
pectSame <- rbind(pectSame,pct)
}
#this makes plot of how much overlap using counts starting at the top
top_cownt(subCat,colOrig,colStrat)
#makes scatter plor of the two columes scaled from 0->1
#and fits trend line and reference line
print(ggplot(subCat, aes(scale0_1(subCat[,colOrig]), scale0_1(subCat[,colStrat]))) +
geom_point(shape=18, color="blue") +
geom_abline(intercept = 0, slope = 1, color="green") +
geom_smooth(method=lm, se=T, color="darkred", fill="black") + #add linear trend line and Std error
ggtitle(paste(i, colOrig, "x", colStrat)) + # for the main title
xlab(colOrig) + # for the x axis label
ylab(colStrat)) # for the y axis label
}
}
top_Precentage <- function(data,colOrig,colStrat,perct){
nrw <- ceiling(nrow(data)*perct/100)
topOrg <- data %>% arrange(desc(get(colOrig)))  %>% slice(1:nrw) %>% select(FIPS)
topStr <- data %>% arrange(desc(get(colStrat))) %>% slice(1:nrw) %>% select(FIPS)
pctsame <- sum(topStr[,1] %in% topOrg[,1])/nrow(topStr)
return(data.frame(perct,pctsame))
}
top_cownt <- function(data,colOrig,colStrat){
#makes a histogram with points every 100 data points
cowntSame <- c()
samect <- c()
for(i in seq(from=5, nrow(data), by=100)){
nrw <- ceiling(i) #finds max
#selects top amount
topOrg <- data %>% arrange(desc(get(colOrig)))  %>% slice(1:nrw) %>% select(FIPS)
topStr <- data %>% arrange(desc(get(colStrat))) %>% slice(1:nrw) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- sum(topStr[,1] %in% topOrg[,1])/nrow(topStr)
cowntSame <- rbind(cowntSame,samect)
}
plot(cowntSame,type = "o", col = "#69b3a2", ylab = "Percent Shared", main = "Percent Shared")
}
#scales from 0-1
scale0_1 <- function(x){(x-min(x))/(max(x)-min(x))}
#applies groupings
groupIt <- function(dataa,col){
dataa$grp <- ifelse(dataa[,col] %in% c("EP_POV150","EP_UNEMP","EP_NOHSDP","EP_UNINSUR","EP_HBURD"),"Socioeconomic Status",
ifelse(dataa[,col] %in% c("EP_AGE65","EP_AGE17","EP_DISABL","EP_SNGPNT","EP_LIMENG"),"Household Characteristics",
ifelse(dataa[,col] == "EP_MINRTY","Racial & Ethnic Minority Status",
ifelse(dataa[,col] %in% c("EP_MUNIT","EP_MOBILE","EP_CROWD","EP_NOVEH","EP_GROUPQ"),"Housing Type & Transportation",0))))
#dataa <- rbind(dataa,grp)
return(dataa)
}
#renames all the columns instead of changeing the labels
re_lableIt <- function(dataa,col){
dataa$names <- ifelse(dataa[,col] == "EP_POV150","Below 150% poverty",
ifelse(dataa[,col] == "EP_UNEMP"  , "Unemployed",
ifelse(dataa[,col] == "EP_NOHSDP" , "Housing Cost Burden",
ifelse(dataa[,col] == "EP_UNINSUR", "No HS Diploma",
ifelse(dataa[,col] == "EP_HBURD"  , "No Health Insurance",
ifelse(dataa[,col] == "EP_AGE65"  , "Aged 65 or older ",
ifelse(dataa[,col] == "EP_AGE17"  , "Aged 17 and younger",
ifelse(dataa[,col] == "EP_DISABL" , "Civilian with a disability",
ifelse(dataa[,col] == "EP_SNGPNT" , "Single-parent households",
ifelse(dataa[,col] == "EP_LIMENG" , "English language proficiency",
ifelse(dataa[,col] == "EP_MINRTY" , "Racial and ethnic minority status",
ifelse(dataa[,col] == "EP_MUNIT"  , "Multi-unit Structures",
ifelse(dataa[,col] == "EP_MOBILE" , "Mobile Homes",
ifelse(dataa[,col] == "EP_CROWD"  , "Crowding",
ifelse(dataa[,col] == "EP_NOVEH"  , "No Vehicle",
ifelse(dataa[,col] == "EP_GROUPQ" , "Group Quarters",NA))))))))))))))))
return(dataa)
}
saveAs <- function(filename){
ggsave(filename, plot = last_plot(), device = NULL, path = savePath,
scale = ptScale, width = ptWidth, height = ptHeight, units = "in",
dpi = 300, limitsize = TRUE)
}
#does analysis stratified and adds it onto the end of the dataframe
strat <- "STATE" #sets strata
byLine <- FA_By_Component(cdcUnik, strat,6:21) #does analysis
withStrata <- left_join(cdcFAtract, byLine$Strat_FA, by="FIPS") #adds FA to big dataframe
#adds name of strata to the last column
names(withStrata)[length(names(withStrata))] <- paste(strat,"PA1",sep = "_")
strat <- "STATE" #sets strata
#gets kmo stratified by state
kmos <- as.data.frame(KMO_By_Component(cdcUnik, strat))
kmos$KMO <- round(as.numeric(kmos$KMO),4)
kmos %>%  kable(caption = "Table of KMO stratified by State")
boxplot(kmos$KMO, horizontal = TRUE, col = "lightblue",
main = "KMO Values Stratified by State")
# makes pretty pictures for each strata identified
#Histo_By_Strat(withStrata,"STATE","FULL_PA1","STATE_PA1") #compares state to country FA
Histo_By_Strat(withStrata, "STATE", "RPL_THEMES", "STATE_PA1") #compares state FA to CDC country wide
FA <- fa(cdcUnik[,6:21], nfactors = 1, fm = "pa", max.iter = 100, rotation = "promax")
# Transform the matrix in long format
loadngs <- melt(FA$loadings[,1])
colnames(loadngs) <- c("Loadings")
loadngs$rowss <- colnames(cdcUnik[,6:21])
loadngs2 <- groupIt(loadngs,'rowss')
loadngs3 <- re_lableIt(loadngs2,'rowss')
#plots out
ggplot(loadngs3, aes(x = 1, y = names, fill = Loadings)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "Loadings", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "red")
saveAs("loadings_national.png")
# Transform the matrix in long format
loadngs <- melt(FA$uniquenesses)
colnames(loadngs) <- c("Uniqueness")
loadngs$rowss <- colnames(cdcUnik[,6:21])
loadngs2 <- groupIt(loadngs,'rowss')
loadngs3 <- re_lableIt(loadngs2,'rowss')
#plots out
ggplot(loadngs3, aes(x = 1, y = names, fill = Uniqueness)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "Uniquness", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "blue", high = "white")
saveAs("uniqueness_national.png")
loadingsTable <- c()
loadingsTable$loadings <- melt(FA$loadings[,1])
loadingsTable$uniqueness <- melt(FA$uniquenesses)
loadingsTable$weight <- melt(FA$weights[,1])
loadingsTable <- as.data.frame(loadingsTable)
colnames(loadingsTable) <- c("Loadings","Uniqueness", "Weights")
round(loadingsTable,3) %>% kable(caption = "Uniquness and Weight by varible on a national level")
# Transform the matrix in long format
loadngs <- melt(FA$weights[,1])
colnames(loadngs) <- c("Weight")
loadngs$rowss <- colnames(cdcUnik[,6:21])
loadngs2 <- groupIt(loadngs,'rowss')
loadngs3 <- re_lableIt(loadngs2,'rowss')
#plots out
ggplot(loadngs3, aes(x = 1, y = names, fill = Weight)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "Loadings", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "darkgreen")
saveAs("weights_state.png")
#this is the one im working on
# Transform the matrix in long format
df <- melt(byLine$uniqness_by_var)
colnames(df) <- c("state", "cols", "Uniqueness")
loadngs2 <- groupIt(df,'cols')
loadngs3 <- re_lableIt(loadngs2,'cols')
#plots out
ggplot(loadngs3, aes(x = state, y = names, fill = Uniqueness)) +
geom_tile() +
facet_grid(~grp,
scales = "free_x",
space = 'free_x',
labeller=label_wrap_gen(width = 20, multi_line = TRUE)) +
coord_flip() +
labs(x = "States", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 20, angle = 45,  hjust = 1),
strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "blue", high = "white")
saveAs("uniqueness_state.png")
byLine[["uniqness_by_var"]] %>% kable(caption = "Uniquness by varible and stratified by State")
# Transform the matrix in long format
df <- melt(byLine$loadings_by_var)
colnames(df) <- c("state", "cols", "Loadings")
loadngs2 <- groupIt(df,'cols')
loadngs3 <- re_lableIt(loadngs2,'cols')
#plots out
ggplot(loadngs3, aes(x = state, y = names, fill = Loadings)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "States", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "red")
saveAs("loadings_state.png")
byLine[["loadings_by_var"]] %>% kable(caption = "Loadings by varible and stratified by State")
#this is the one im working on
# Transform the matrix in long format
df <- melt(byLine$weights_by_var)
colnames(df) <- c("state", "cols", "Weights")
loadngs2 <- groupIt(df,'cols')
loadngs3 <- re_lableIt(loadngs2,'cols')
#plots out
ggplot(loadngs3, aes(x = state, y = names, fill = Weights)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free_x',labeller=label_wrap_gen(width = 20, multi_line = TRUE)) +
coord_flip() +
labs(x = "States", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 20, angle = 45,  hjust = 1),
strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "darkgreen")
saveAs("weights_state.png")
#this compares the national level FA vs the CDC SIV  + ggtitle(paste("CDC SVI Ranks x national FA Ranks"))
ggplot(withStrata, aes(x=rank(RPL_THEMES), y=rank(FULL_PA1))) +
geom_point(shape=18, color="lightgreen") +
geom_abline(intercept = 0, slope = 1, color="red") +
geom_smooth(method=lm, se=T, color="blue4", fill="black") +
xlab(paste("CDC SVI Rank")) + # for the x axis label
ylab(paste("National FA Rank")) # for the y axis label
#this compares the stratified state level FA vs the CDC SIV rankings
stratStateRank <- c()
for(i in unique(withStrata$STATE)){
subCat <- filter(withStrata,withStrata$STATE == i)
x <- rank(subCat$RPL_THEMES)
y <- rank(subCat$STATE_PA1)
stratStateRank <- as.data.frame(rbind(stratStateRank, cbind(x,y)))
}
#gets correlation cooefficient
stateStratCorr <- cor.test(x=stratStateRank$x, y=stratStateRank$y, method = 'spearman')
#ggtitle(paste("CDC SVI Ranks x State FA Ranks stratified by state")) +
ggplot(stratStateRank, aes(x=x, y= y)) +
geom_point(shape=18, color="lightgreen") +
geom_abline(intercept = 0, slope = 1, color="red") +
geom_smooth(method=lm, se=T, color="blue4", fill="black") +
xlab(paste("CDC SVI Rank")) + # for the x axis label
ylab(paste("State FA Rank")) # for the y axis label
uneek <- unique(withStrata[["STATE"]])  #creates list to iterate thru
plott <- c()
corTable <- c()
for(i in uneek){
subCat <- filter(withStrata,get("STATE") == i)
spearCor <- cor.test(x=rank(subCat$RPL_THEMES), y=rank(subCat$STATE_PA1), method = 'spearman')
corTable <- rbind(corTable, c(state = i, Estimate = spearCor$estimate, Pvalue = spearCor$p.value))
print(ggplot(subCat, aes(x=rank(subCat$RPL_THEMES), y=rank(subCat$STATE_PA1))) +
geom_point(shape=18, color="lightgreen") +
geom_abline(intercept = 0, slope = 1, color="green") +
geom_smooth(method=lm, se=T, color="blue4", fill="black") +
ggtitle(paste(i, "CDC SVI Ranks x State FA Ranks")) +
xlab(paste("CDC SVI ", i)) + # for the x axis label
ylab(paste("STATE FA ", i))) # for the y axis label
}
#need to clean this up?? wrong col names
corTable <- as.data.frame(corTable)
nationaCor <- cor.test(x=rank(withStrata$RPL_THEMES), y=rank(withStrata$STATE_PA1), method = 'spearman')
#create %overlap for each state
perct <- 0.10
region <- c()
pct <- c()
pctfull <- c()
pctSharedbyState <- c()
for(i in unique(withStrata$STATE)){
subCat <-withStrata %>% filter(withStrata$STATE == i)
lngth <- nrow(subCat) * perct
#selects top amount
topOrg <- subCat %>% arrange(desc(get("RPL_THEMES")))  %>% slice(1:lngth) %>% select(FIPS)
topStr <- subCat %>% arrange(desc(get("STATE_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
topStrFul <- subCat %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:lngth) %>% select(FIPS)
#compares Fips from each to see the overlap
samect <- round(sum(topStr[,1] %in% topOrg[,1])/nrow(topStr), 3)
samectfull <- round(sum(topStrFul[,1] %in% topOrg[,1])/nrow(topStr), 3)
region <- rbind(region, i)
pct <- rbind(pct, samect)
pctfull <- rbind(pctfull, samectfull)
}
pctSharedbyStateAll <- cbind.data.frame(region = region,pct = pct*100, pctfull = pctfull*100)
summary(pctSharedbyStateAll$pct)
pctSharedbyStateAll %>% kable(caption = "The percentage of overlap of the top 10% between SVI and the FA")
pctSharedbyState <- pctSharedbyStateAll[,1:2]
states <- map_data("state")
colnames(pctSharedbyState) <- c("region","pct")
pctSharedbyState$region <- tolower(pctSharedbyState$region)
shared.geo <- merge(states,pctSharedbyState,by = "region")
shared.geo <- shared.geo[order(shared.geo$order),]
ggplot(shared.geo,aes(long, lat))+
geom_polygon(aes(group=group, fill= pct))+
coord_map() + scale_fill_gradient2(
low = "yellow",
mid = "green",
high = "blue",
midpoint = 0.5)
pctSharedbyState <- pctSharedbyStateAll[,c(1,3)]
states <- map_data("state")
colnames(pctSharedbyState) <- c("region","pct")
pctSharedbyState$region <- tolower(pctSharedbyState$region)
shared.geo <- merge(states,pctSharedbyState,by = "region")
shared.geo <- shared.geo[order(shared.geo$order),]
ggplot(shared.geo,aes(long, lat))+
geom_polygon(aes(group=group, fill= pct))+
coord_map() + scale_fill_gradient2(
low = "yellow",
mid = "green",
high = "blue",
midpoint = 0.5)
#percent shared across all states:
top_Precentage(withStrata,"FULL_PA1","RPL_THEMES",10)
#lowest ranked fips
chunk <- withStrata %>% arrange(desc(get("FULL_PA1"))) %>% slice(1:9705)
tbl <- as.data.frame(table(chunk$STATE))
tblfull <- as.data.frame(table(withStrata$STATE))
yy <- inner_join(tbl, tblfull, by = "Var1")
yy$pct <- yy$Freq.x/yy$Freq.y
yy$pctTotal <- yy$Freq.x/9705
#write out the FA results
withFIPS <- TRUE
if(withFIPS == T){
write.csv(withStrata, "C:\\Users\\Ecava\\OneDrive\\Desktop\\research\\withStrata.csv", row.names=FALSE)}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
FA <- fa(cdcUnik[,6:21], nfactors = 1, fm = "pa", max.iter = 100, rotation = "promax")
# Transform the matrix in long format
loadngs <- melt(FA$loadings[,1])
colnames(loadngs) <- c("Loadings")
loadngs$rowss <- colnames(cdcUnik[,6:21])
loadngs2 <- groupIt(loadngs,'rowss')
loadngs3 <- re_lableIt(loadngs2,'rowss')
#plots out
ggplot(loadngs3, aes(x = 1, y = names, fill = Loadings)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "Loadings", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "red")
saveAs("loadings_national.png",4)
saveAs <- function(filename,ptHeight){
ggsave(filename, plot = last_plot(), device = NULL, path = savePath,
scale = ptScale, width = ptWidth, height = ptHeight, units = "in",
dpi = 300, limitsize = TRUE)
}
FA <- fa(cdcUnik[,6:21], nfactors = 1, fm = "pa", max.iter = 100, rotation = "promax")
# Transform the matrix in long format
loadngs <- melt(FA$loadings[,1])
colnames(loadngs) <- c("Loadings")
loadngs$rowss <- colnames(cdcUnik[,6:21])
loadngs2 <- groupIt(loadngs,'rowss')
loadngs3 <- re_lableIt(loadngs2,'rowss')
#plots out
ggplot(loadngs3, aes(x = 1, y = names, fill = Loadings)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "Loadings", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "red")
saveAs("loadings_national.png",4)
# Transform the matrix in long format
loadngs <- melt(FA$uniquenesses)
colnames(loadngs) <- c("Uniqueness")
loadngs$rowss <- colnames(cdcUnik[,6:21])
loadngs2 <- groupIt(loadngs,'rowss')
loadngs3 <- re_lableIt(loadngs2,'rowss')
#plots out
ggplot(loadngs3, aes(x = 1, y = names, fill = Uniqueness)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "Uniquness", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "blue", high = "white")
saveAs("uniqueness_national.png",4)
loadingsTable <- c()
loadingsTable$loadings <- melt(FA$loadings[,1])
loadingsTable$uniqueness <- melt(FA$uniquenesses)
loadingsTable$weight <- melt(FA$weights[,1])
loadingsTable <- as.data.frame(loadingsTable)
colnames(loadingsTable) <- c("Loadings","Uniqueness", "Weights")
round(loadingsTable,3) %>% kable(caption = "Uniquness and Weight by varible on a national level")
# Transform the matrix in long format
loadngs <- melt(FA$weights[,1])
colnames(loadngs) <- c("Weight")
loadngs$rowss <- colnames(cdcUnik[,6:21])
loadngs2 <- groupIt(loadngs,'rowss')
loadngs3 <- re_lableIt(loadngs2,'rowss')
#plots out
ggplot(loadngs3, aes(x = 1, y = names, fill = Weight)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "Loadings", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "darkgreen")
saveAs("weights_national.png",4)
#this is the one im working on
# Transform the matrix in long format
df <- melt(byLine$uniqness_by_var)
colnames(df) <- c("state", "cols", "Uniqueness")
loadngs2 <- groupIt(df,'cols')
loadngs3 <- re_lableIt(loadngs2,'cols')
#plots out
ggplot(loadngs3, aes(x = state, y = names, fill = Uniqueness)) +
geom_tile() +
facet_grid(~grp,
scales = "free_x",
space = 'free_x',
labeller=label_wrap_gen(width = 20, multi_line = TRUE)) +
coord_flip() +
labs(x = "States", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 20, angle = 45,  hjust = 1),
strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "blue", high = "white")
saveAs("uniqueness_state.png",20)
byLine[["uniqness_by_var"]] %>% kable(caption = "Uniquness by varible and stratified by State")
# Transform the matrix in long format
df <- melt(byLine$loadings_by_var)
colnames(df) <- c("state", "cols", "Loadings")
loadngs2 <- groupIt(df,'cols')
loadngs3 <- re_lableIt(loadngs2,'cols')
#plots out
ggplot(loadngs3, aes(x = state, y = names, fill = Loadings)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free') +
coord_flip() + labs(x = "States", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 4),axis.text.x = element_text(angle = 45,  hjust=1),strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "red")
saveAs("loadings_state.png",20)
byLine[["loadings_by_var"]] %>% kable(caption = "Loadings by varible and stratified by State")
#this is the one im working on
# Transform the matrix in long format
df <- melt(byLine$weights_by_var)
colnames(df) <- c("state", "cols", "Weights")
loadngs2 <- groupIt(df,'cols')
loadngs3 <- re_lableIt(loadngs2,'cols')
#plots out
ggplot(loadngs3, aes(x = state, y = names, fill = Weights)) +
geom_tile() +
facet_grid(~grp,scales = "free_x", space = 'free_x',labeller=label_wrap_gen(width = 20, multi_line = TRUE)) +
coord_flip() +
labs(x = "States", y =  "Parameters from Census") +
theme(axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 20, angle = 45,  hjust = 1),
strip.text.x = element_text(angle = 90)) +
scale_fill_gradient(low = "white", high = "darkgreen")
saveAs("weights_state.png",20)
## i ran it with the reduced model with just a few cols, the result was basically the same
## im leaaving it out to save on runtime, and since the results were insignificant and unremarkable
#reduces stratus to only those with high unikness, and the id lines etc
reduced <- subset(cdcUnik,select = -c(E_TOTPOP,EP_UNEMP, EP_UNINSUR,	EP_AGE65,	EP_AGE17,	EP_DISABL,EP_SNGPNT, EP_MUNIT,	EP_MOBILE,EP_CROWD,	EP_GROUPQ))
byLine <- FA_By_Component(reduced, strat,5:10) #does analysis
withStrataRed <- left_join(cdcFAtract, byLine$Strat_FA, by="FIPS") #adds FA to big dataframe
#adds name of strata to the last column
names(withStrataRed)[length(names(withStrataRed))] <- paste("HI","PA1",sep = "_")
Histo_By_Strat(withStrataRed, "STATE", "RPL_THEMES", "HI_PA1")
